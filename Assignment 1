{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN75xDkR2dSMhpIRULRv5us",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/greeshma739/WE-MOdule3/blob/main/Assignment%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9mQwUKcjArdj",
        "outputId": "c7009d4f-652f-4d59-f05f-0c7433f66b44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test case 1: [2, 4, 6, 7]\n",
            "Minimum number of idlis to distribute: -1\n",
            "\n",
            "Test case 2: [1, 3, 4, 5]\n",
            "Minimum number of idlis to distribute: -1\n",
            "\n",
            "Test case 3: [2, 3, 4, 6]\n",
            "Minimum number of idlis to distribute: -1\n",
            "\n",
            "Test case 4: [2, 3, 5, 7]\n",
            "Minimum number of idlis to distribute: -1\n",
            "\n",
            "Test case 5: [1]\n",
            "Minimum number of idlis to distribute: -1\n",
            "\n",
            "Test case 6: []\n",
            "Minimum number of idlis to distribute: 0\n",
            "\n",
            "Test case 7: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n",
            "Minimum number of idlis to distribute: 100\n",
            "\n"
          ]
        }
      ],
      "source": [
        "def distribute_idlis(citizens):\n",
        "    min_idlis = 0\n",
        "    possible = True\n",
        "\n",
        "    for i in range(len(citizens) - 1):\n",
        "        if citizens[i] % 2 != 0:\n",
        "            distribute_to_next(citizens, i)\n",
        "            min_idlis += 2\n",
        "        if citizens[i] % 2 != 0:\n",
        "            possible = False\n",
        "            break\n",
        "\n",
        "    if not possible or citizens and citizens[-1] % 2 != 0:\n",
        "        return -1\n",
        "\n",
        "    return min_idlis\n",
        "\n",
        "def distribute_to_next(citizens, idx):\n",
        "    citizens[idx] += 1\n",
        "    citizens[idx + 1] += 1\n",
        "\n",
        "# Test cases\n",
        "test_cases = [\n",
        "    [2, 4, 6, 7],   # Test Case 1: Not possible\n",
        "    [1, 3, 4, 5],   # Test Case 2: 2 idlis need to be distributed\n",
        "    [2, 3, 4, 6],   # Test Case 3: 1 idli need to be distributed\n",
        "    [2, 3, 5, 7],   # Test Case 4: 1 idli need to be distributed\n",
        "    [1],            # Test Case 5: Not possible\n",
        "    [],             # Test Case 6: No idlis need to be distributed\n",
        "    list(range(1, 101)),  # Test Case 7: Not possible for large number of citizens\n",
        "]\n",
        "\n",
        "for idx, test_case in enumerate(test_cases):\n",
        "    print(f\"Test case {idx + 1}: {test_case}\")\n",
        "    print(\"Minimum number of idlis to distribute:\", distribute_idlis(test_case))\n",
        "    print()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hUM9DZIHAs_S"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}